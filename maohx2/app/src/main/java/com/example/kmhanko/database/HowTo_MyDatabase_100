■クラス　MyDatabase
・コンストラクタ引数
Context
・説明
SLiteDatabaseを扱いやすくした(つもりの)クラス

・メソッド
boolean init(String _db_name, String _db_asset, int _db_version, String load_mode)
    説明 : MyDatabaseAdminQで勝手に呼ばれるメソッドなので、使用する必要はない。

String s_quo (String str)
    引数 :
        String str : 任意の文字列
    返り値 : 任意の文字列を''で囲った文字列
    説明 : 文字列を''で囲った文字列を返すだけの関数。
    他のメソッドにおける引数w_scriptにおいて、このメソッドを用いるようにしておけば、ミスが減るかもしれない。

----読み込み----
List<Integer> getInt(String t_name, String c_name)
List<Integer> getInt(String t_name, String c_name, String w_script)
List<String> getString(String t_name, String c_name)
List<String> getString(String t_name, String c_name, String w_script)
List<Double> getDouble(String t_name, String c_name)
List<Double> getDouble(String t_name, String c_name, String w_script)
List<Float> getFloat(String t_name, String c_name)
List<Float> getFloat(String t_name, String c_name, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String c_name : データベースのカラム名
        String w_script : 検索条件
    返り値 : 各種型のリスト
    説明 : t_nameテーブルの、c_nameカラムの値群のうち、w_scriptで表す検索条件に一致する値のリストを返す。
    この時の型は、それぞれのメソッドの名前と対応する。
    補足 : w_scriptの記述は、SQLite文に従う。以下に主要なルールを示す。

    ----------------
    ・比較演算子
    a = b   aとbは等しい　a == bでも可
    a <> b  aとbは等しくない　a != bでも可
    a > b   aはbより大きい
    a >= b  aはb以上
    a < b   aはbより小さい
    a <= b  aはb以下

    ・形式
    カラム名 比較演算子 値

    ・論理演算子(それぞれ小文字でも可)
    C1 AND C2
    C1 OR C2
    NOT C1

    ・注意事項
    String型の値の項目について記述するときは、必ず''で囲むか、メソッド s_quo(String)を通すこと
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ・例
    ------weapon_table------
    name    type    attack
    レイピア    剣   50
    刀       剣   40
    ダガー     剣   20
    グングニル   槍   60
    ------------------------

    w_script = "name = 'レイピア'"　→nameにレイピアが格納されている(項目)　→レイピア
    w_script = "type = '剣' and attack > 30"　→typeに剣が格納されており、かつ、attackが30を超える(項目)　→レイピア、刀
    w_script = "rowID = 3"　→3番目の(項目)　→ダガー
    ----------------

List<Integer> getRowID(String t_name, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String w_script : 検索条件
    返り値 : 項目ID(何番目の項目か)
    説明 : t_nameテーブルの、w_scriptで表す検索条件に一致するID(rowID)のリストを返す。
    このIDは1から始まるので注意。
    ~~~~~~~~~~~~~~~~~

int getOneRowID(String t_name, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String w_script : 検索条件
    返り値 : 項目ID(何番目の項目か)
    説明 : t_nameテーブルの、w_scriptで表す検索条件に一致するID(rowID)のうち、最も小さい値を返す。
    このIDは1から始まるので注意。
    ~~~~~~~~~~~~~~~~~

int getOneRowIDForArray(String t_name, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String w_script : 検索条件
    返り値 : 項目ID(何番目の項目か)
    説明 : t_nameテーブルの、w_scriptで表す検索条件に一致するID(rowID)のうち、最も小さい値 - 1 を返す。
    配列やリスト等の要素番号の指定に使うときに便利かもしれない。

List<String> getOneLine(String t_name, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String w_script : 検索条件
    返り値 : 一行分の値全てが格納されたリスト
    説明 : t_nameテーブルの、w_scriptで表す検索条件に一致する行のうち、最もrowIDの小さいものの全ての値のリストを返す
    例 :
    ------test_table------
    name    age weight
    Taro    20  64.2
    ----------------------
    に対して
    List<String> buf = db.getOneLine("test_table","name = 'Taro'");
    とすると
    buf = { "Taro", "20", "64.2" }
    が格納される。

public List<String> getOneLine(String t_name, int rowid)
    引数 :
        String t_name : データベースのテーブル名
        String w_script : 検索条件
    返り値 : 一行分の値全てが格納されたリスト
    説明 : t_nameテーブルの、IDがrowidの(rowid番目の)、全ての値のリストを返す

----書き込み----
boolean insert(String t_name, String[] c_names, String[] values)
    引数 :
        String t_name : データベースのテーブル名
        String[] c_names : データベースに格納する値に対応するカラム名のリスト
        T[] values : データベースに格納する値のリスト
    返り値 : 挿入に成功したならtrue,失敗したならfalse
    説明 : t_nameテーブルの、カラム名c_names[i]に値values[i]を格納する。
    格納したい値が(カラムの定義が)int型などの場合も、String型で格納する。大抵の場合、様々な型が混じっている場合が多いので、この方法を取らざるを得ない。

    使用例 :
    mydatabase.insert("test_table",new String[] { "name", "age", "weight" },new String[] { "Taro", "20", "64.2" });
    このように使うと、以下のように格納される
    ------test_table------
    name    age weight
    Taro    20  64.2
    ----------------------

int delete(String t_name, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String w_script : 削除条件
        返り値 : 削除された項目の個数
        説明 : t_nameテーブルの、w_scriptで表す検索条件に一致する項目を削除する。

int rewrite(String t_name, String[] c_names, String[] values, String w_script)
    引数 :
        String t_name : データベースのテーブル名
        String[] c_names : データベースに格納する値に対応するカラム名のリスト
        String[] values : データベースに格納する値のリスト
        String w_script : 変更条件
    返り値 : 変更された項目の個数
    説明 : t_nameテーブルの、w_scriptで表す検索条件に一致する項目について、
    カラム名c_names[i]に値values[i]を上書きする。指定していないカラムの内容は変更されない。

----ゲッタ----
String getDbName()
String getDbAsset()
int getDbVersion()

・クラス使用例
HowTo/MyDatabaseAdminに記載